using System;
using System.IO;
using System.Security;
using System.Text;
using Moserware.Security.Cryptography;
using NUnit.Framework;

namespace UnitTests.Security.Cryptography {
    [TestFixture]
    public class OpenPgpTests {
        // These test files came from running GPG from the command line
        private static readonly byte[] _HelloWorldExampleIteratedAndSaltedS2K = new byte[] {
            0x8C, 0x0D, 0x04, 0x09, 0x03, 0x02, 0x1F, 0xDA, 0xF1, 0xBB, 
            0x88, 0x86, 0x8D, 0x64, 0xBE, 0xD2, 0x48, 0x01, 0x67, 0x8C, 
            0x45, 0x06, 0xAC, 0x57, 0x75, 0x48, 0x2D, 0x2E, 0xA4, 0x6C, 
            0xF3, 0x22, 0x3D, 0x0B, 0xEA, 0xD9, 0xB8, 0x1E, 0x29, 0x15, 
            0x4E, 0x0E, 0xA1, 0x33, 0x76, 0x01, 0x06, 0xD3, 0x04, 0x48, 
            0xCE, 0xBF, 0xFB, 0x36, 0xC3, 0x9D, 0xBE, 0x83, 0x10, 0x7B, 
            0xCD, 0x47, 0xA2, 0xB6, 0xBE, 0x28, 0x07, 0x1A, 0x63, 0xFB,
            0x35, 0x54, 0xC2, 0x21, 0x02, 0xE7, 0xD4, 0x66, 0x13, 0x6C, 
            0x34, 0x8B, 0x60, 0x2C, 0x1F, 0xBA, 0xF7, 0x6D, 0x03
        };

        private static readonly byte[] _HelloWorldExampleSimpleS2K = new byte[] {
            0x8C, 0x04, 0x04, 0x09, 0x00, 0x0A, 0xD2, 0x49, 0x01, 0xF2, 
            0x69, 0x0B, 0x7B, 0x46, 0xDD, 0x80, 0xBA, 0x55, 0xC2, 0xA3, 
            0xC5, 0xD8, 0x6B, 0x04, 0x42, 0x35, 0xE0, 0x30, 0xD0, 0x8E, 
            0xF7, 0xF0, 0x60, 0xF5, 0x13, 0x80, 0x96, 0x4F, 0x71, 0x3B, 
            0x5E, 0x24, 0x12, 0xF9, 0x57, 0x94, 0x4B, 0x20, 0x8A, 0xEA, 
            0xC4, 0xB3, 0xAF, 0xD9, 0xFF, 0xD6, 0x5C, 0x4A, 0xBD, 0x7F, 
            0x6C, 0x4A, 0xC4, 0xD4, 0xB8, 0xC7, 0x75, 0x55, 0xD9, 0xA2, 
            0xBB, 0xE1, 0x93, 0x11, 0x33, 0x86, 0x08, 0xD0, 0xD0, 0x0F, 
            0x31
        };

        private static readonly byte[] _HelloWorldSaltedS2K = new byte[] {
            0x8C, 0x0C, 0x04, 0x09, 0x01, 0x0A, 0x13, 0xFB, 0x70, 0x10, 
            0xE7, 0xDE, 0xAF, 0x76, 0xD2, 0x49, 0x01, 0xE6, 0x12, 0xE3, 
            0xDC, 0xAC, 0x70, 0x37, 0xBE, 0x72, 0xB9, 0xA1, 0xF3, 0x67, 
            0xF0, 0xDF, 0xF6, 0xEF, 0xF8, 0x2C, 0x10, 0xC1, 0xDE, 0x7E, 
            0x0D, 0x52, 0x24, 0x5D, 0x68, 0xE4, 0xEF, 0xB2, 0x7F, 0xF1, 
            0x52, 0x4E, 0x93, 0x04, 0xEE, 0x0B, 0x31, 0x36, 0x41, 0x1A, 
            0xF9, 0x46, 0x8D, 0x22, 0x3F, 0x0E, 0xC2, 0x36, 0xD6, 0xF1, 
            0x4D, 0xC6, 0x1B, 0xBA, 0x33, 0xAD, 0xD3, 0x9C, 0xF1, 0xE5, 
            0xB5, 0xDC, 0xAA, 0x94, 0x97, 0x80, 0xAF, 0xC4, 0x57
        };

        [Test]
        public void DecryptSingleFileTest() {
            Action<byte[]> assertHelloWorld =
                bytes => Assert.AreEqual("Hello World!",
                                new StreamReader(
                                    OpenPgp.DecryptSingleFile(new MemoryStream(bytes), TestPassphrase))
                                    .ReadToEnd());

            assertHelloWorld(_HelloWorldExampleSimpleS2K);
            assertHelloWorld(_HelloWorldSaltedS2K);
            assertHelloWorld(_HelloWorldExampleIteratedAndSaltedS2K);
        }

        [Test]
        public void EncryptSingleFileTest() {
            const string expectedMessage = "Hello from C#!";
            const string expectedFileName = "HelloFromCS.txt";
            var helloStream = new MemoryStream(System.Text.Encoding.ASCII.GetBytes(expectedMessage));
            var encrypted = OpenPgp.EncryptSingleFile(TestPassphrase, helloStream, expectedFileName);

            string decryptedFileName;
            var decrypted = OpenPgp.DecryptSingleFile(encrypted, TestPassphrase, out decryptedFileName) as MemoryStream;
            Assert.AreEqual(expectedFileName, decryptedFileName);
            var decryptedMessage = Encoding.UTF8.GetString(decrypted.ToArray());
            Assert.AreEqual(expectedMessage, decryptedMessage);
        }

        private static SecureString TestPassphrase {
            get {
                var test = new SecureString();
                foreach(var c in "test") {
                    test.AppendChar(c);
                }
                return test;
            }
        }
    }
}
